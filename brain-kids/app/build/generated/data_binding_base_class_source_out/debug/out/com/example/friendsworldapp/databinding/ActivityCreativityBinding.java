// Generated by view binder compiler. Do not edit!
package com.example.friendsworldapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.friendsworldapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCreativityBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonConnect;

  @NonNull
  public final Button buttonCreativity;

  @NonNull
  public final Button buttonDevelopment;

  @NonNull
  public final Button buttonSale;

  @NonNull
  public final Button buttonSpeedThinking;

  @NonNull
  public final ImageView imageBack;

  @NonNull
  public final ImageView imageConnect;

  @NonNull
  public final ImageView imageCreativity;

  @NonNull
  public final ImageView imageDevelopment;

  @NonNull
  public final ImageView imageSpeedThinking;

  @NonNull
  public final ProgressBar progressBarConnect;

  @NonNull
  public final ProgressBar progressBarCreativity;

  @NonNull
  public final ProgressBar progressBarDevelopment;

  @NonNull
  public final ProgressBar progressBarSpeedThinking;

  @NonNull
  public final TextView textConncect;

  @NonNull
  public final TextView textConnectPercents;

  @NonNull
  public final TextView textCreativity;

  @NonNull
  public final TextView textCreativityPercents;

  @NonNull
  public final TextView textDevelopment;

  @NonNull
  public final TextView textDevelopmentPercents;

  @NonNull
  public final TextView textSpeedThinking;

  @NonNull
  public final TextView textSpeedThinkingPercents;

  private ActivityCreativityBinding(@NonNull LinearLayout rootView, @NonNull Button buttonConnect,
      @NonNull Button buttonCreativity, @NonNull Button buttonDevelopment,
      @NonNull Button buttonSale, @NonNull Button buttonSpeedThinking, @NonNull ImageView imageBack,
      @NonNull ImageView imageConnect, @NonNull ImageView imageCreativity,
      @NonNull ImageView imageDevelopment, @NonNull ImageView imageSpeedThinking,
      @NonNull ProgressBar progressBarConnect, @NonNull ProgressBar progressBarCreativity,
      @NonNull ProgressBar progressBarDevelopment, @NonNull ProgressBar progressBarSpeedThinking,
      @NonNull TextView textConncect, @NonNull TextView textConnectPercents,
      @NonNull TextView textCreativity, @NonNull TextView textCreativityPercents,
      @NonNull TextView textDevelopment, @NonNull TextView textDevelopmentPercents,
      @NonNull TextView textSpeedThinking, @NonNull TextView textSpeedThinkingPercents) {
    this.rootView = rootView;
    this.buttonConnect = buttonConnect;
    this.buttonCreativity = buttonCreativity;
    this.buttonDevelopment = buttonDevelopment;
    this.buttonSale = buttonSale;
    this.buttonSpeedThinking = buttonSpeedThinking;
    this.imageBack = imageBack;
    this.imageConnect = imageConnect;
    this.imageCreativity = imageCreativity;
    this.imageDevelopment = imageDevelopment;
    this.imageSpeedThinking = imageSpeedThinking;
    this.progressBarConnect = progressBarConnect;
    this.progressBarCreativity = progressBarCreativity;
    this.progressBarDevelopment = progressBarDevelopment;
    this.progressBarSpeedThinking = progressBarSpeedThinking;
    this.textConncect = textConncect;
    this.textConnectPercents = textConnectPercents;
    this.textCreativity = textCreativity;
    this.textCreativityPercents = textCreativityPercents;
    this.textDevelopment = textDevelopment;
    this.textDevelopmentPercents = textDevelopmentPercents;
    this.textSpeedThinking = textSpeedThinking;
    this.textSpeedThinkingPercents = textSpeedThinkingPercents;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCreativityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCreativityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_creativity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCreativityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonConnect;
      Button buttonConnect = ViewBindings.findChildViewById(rootView, id);
      if (buttonConnect == null) {
        break missingId;
      }

      id = R.id.button_creativity;
      Button buttonCreativity = ViewBindings.findChildViewById(rootView, id);
      if (buttonCreativity == null) {
        break missingId;
      }

      id = R.id.buttonDevelopment;
      Button buttonDevelopment = ViewBindings.findChildViewById(rootView, id);
      if (buttonDevelopment == null) {
        break missingId;
      }

      id = R.id.buttonSale;
      Button buttonSale = ViewBindings.findChildViewById(rootView, id);
      if (buttonSale == null) {
        break missingId;
      }

      id = R.id.buttonSpeedThinking;
      Button buttonSpeedThinking = ViewBindings.findChildViewById(rootView, id);
      if (buttonSpeedThinking == null) {
        break missingId;
      }

      id = R.id.imageBack;
      ImageView imageBack = ViewBindings.findChildViewById(rootView, id);
      if (imageBack == null) {
        break missingId;
      }

      id = R.id.imageConnect;
      ImageView imageConnect = ViewBindings.findChildViewById(rootView, id);
      if (imageConnect == null) {
        break missingId;
      }

      id = R.id.image_creativity;
      ImageView imageCreativity = ViewBindings.findChildViewById(rootView, id);
      if (imageCreativity == null) {
        break missingId;
      }

      id = R.id.imageDevelopment;
      ImageView imageDevelopment = ViewBindings.findChildViewById(rootView, id);
      if (imageDevelopment == null) {
        break missingId;
      }

      id = R.id.imageSpeedThinking;
      ImageView imageSpeedThinking = ViewBindings.findChildViewById(rootView, id);
      if (imageSpeedThinking == null) {
        break missingId;
      }

      id = R.id.progressBarConnect;
      ProgressBar progressBarConnect = ViewBindings.findChildViewById(rootView, id);
      if (progressBarConnect == null) {
        break missingId;
      }

      id = R.id.progressBarCreativity;
      ProgressBar progressBarCreativity = ViewBindings.findChildViewById(rootView, id);
      if (progressBarCreativity == null) {
        break missingId;
      }

      id = R.id.progressBarDevelopment;
      ProgressBar progressBarDevelopment = ViewBindings.findChildViewById(rootView, id);
      if (progressBarDevelopment == null) {
        break missingId;
      }

      id = R.id.progressBarSpeedThinking;
      ProgressBar progressBarSpeedThinking = ViewBindings.findChildViewById(rootView, id);
      if (progressBarSpeedThinking == null) {
        break missingId;
      }

      id = R.id.textConncect;
      TextView textConncect = ViewBindings.findChildViewById(rootView, id);
      if (textConncect == null) {
        break missingId;
      }

      id = R.id.textConnectPercents;
      TextView textConnectPercents = ViewBindings.findChildViewById(rootView, id);
      if (textConnectPercents == null) {
        break missingId;
      }

      id = R.id.textCreativity;
      TextView textCreativity = ViewBindings.findChildViewById(rootView, id);
      if (textCreativity == null) {
        break missingId;
      }

      id = R.id.textCreativityPercents;
      TextView textCreativityPercents = ViewBindings.findChildViewById(rootView, id);
      if (textCreativityPercents == null) {
        break missingId;
      }

      id = R.id.textDevelopment;
      TextView textDevelopment = ViewBindings.findChildViewById(rootView, id);
      if (textDevelopment == null) {
        break missingId;
      }

      id = R.id.textDevelopmentPercents;
      TextView textDevelopmentPercents = ViewBindings.findChildViewById(rootView, id);
      if (textDevelopmentPercents == null) {
        break missingId;
      }

      id = R.id.textSpeedThinking;
      TextView textSpeedThinking = ViewBindings.findChildViewById(rootView, id);
      if (textSpeedThinking == null) {
        break missingId;
      }

      id = R.id.textSpeedThinkingPercents;
      TextView textSpeedThinkingPercents = ViewBindings.findChildViewById(rootView, id);
      if (textSpeedThinkingPercents == null) {
        break missingId;
      }

      return new ActivityCreativityBinding((LinearLayout) rootView, buttonConnect, buttonCreativity,
          buttonDevelopment, buttonSale, buttonSpeedThinking, imageBack, imageConnect,
          imageCreativity, imageDevelopment, imageSpeedThinking, progressBarConnect,
          progressBarCreativity, progressBarDevelopment, progressBarSpeedThinking, textConncect,
          textConnectPercents, textCreativity, textCreativityPercents, textDevelopment,
          textDevelopmentPercents, textSpeedThinking, textSpeedThinkingPercents);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
